#include "../../headers/stdafx.h"

#include "../../headers/Brain/Brain.h"




//
// Инициализация полей
//
void Brain::Core::InitCore() {
	// Кол-во типов нейронов (int)
	N_Types = 2;
	// Таблица чувствительности синаптических и внесинаптических рецепторов к медиаторам, генерируемым аксонами нейронов разного типа
	SensTable = gcnew array<unsigned short, 3>(N_Types, N_Types, 2);
	// Комментарии (Егармин К.Н.):
	// (N_Types, N_Types, 2);
	// 2 - означает, что всего два вида рецепторов: синаптические и внесинаптические
	// Это число не изменится, даже если типов нейронов станет больше

	// Размеры коры (int)
	X_C = 150;
	Y_C = 150;

	// Основная картинка: кора
	pic = gcnew System::Drawing::Bitmap(X_C, Y_C);
	Gpic = System::Drawing::Graphics::FromImage(this->pic);
		
	// Общее количество паттернов (int)
	NP = 5;
	// Комментарии (Егармин К.Н.):
	// Речь идет о паттернах вызванной активности, которые обозначаются группами красных точек

	// Набор паттернов вызванной активности // Егармин К.Н.: т.е. входных аксонов
	PatSet = gcnew array<Pattern>(NP);

	// Радиус паттерна вызванной активности (int)
	R_Pat = 6;

	// Кол-во нейронов в патерне вызванной активности (int)
	NNPat = 15;

	// Кора
	Cortex = gcnew array<Neuron, 2>(X_C, Y_C);

	// Предел количества нейронов в релаксирующем состоянии для каждого из типов. Выше этого предела подавляется спонтанная активность
	LImin = gcnew array<double>(N_Types);
	// Задание пороговых уровней плотности релаксирующих нейронов для подавления спонтанной активности
	LImin[0] = 0.01;
	LImin[1] = 0.01;

	// Расстояние слежения за активностью для ID (влево и вправо по горизонтали и вертикали) (int)
	// Егармин К.Н.: для метаботропных рецепторов
	R_ID = 15;
	// Расстояние слежения за активностью для весов W (влево и вправо по горизонтали и вертикали) (int)
	// Егармин К.Н.: для синаптических рецепторов
	R_W = R_ID;
	// Радиус распространения активности. Связан с расчетом активности на синапсах (трогать аккуратно) (int)
	RLAM = R_W;
	// шаблон распределения активности (int)
	NLocalAM = 2 * RLAM + 1;
	LocalAM = gcnew array<float, 2>(NLocalAM, NLocalAM);
	// Параметр распространения активности. Дисперсия
	Sigma2LAM = (float)System::Math::Pow(5., 2);

	// Текущий такт (int)
	CT = 0;

	// Период полурапада распределенной активности (тактов) (int)
	TAhalf = 4;
	// Падение активности за один такт
	KA = (float)( 1 / System::Math::Pow( 2.0, 1.0 / TAhalf ) );
	
	// Поле накопленной вызванной активности коры
	Field_A_Accum = gcnew array<float, 2>(X_C, Y_C);
	// Порог окружающей вызванной активности для возможности обучения
	L_ActL1 = 0.15f;
	
	// Поле мгновенной активности коры
	Field_A = gcnew array<float, 2>(X_C, Y_C);
	// Порог активности на синапсах для возможности обучения
	// Егармин К.Н.: грубо говоря, нужно чтобы 2% синапсов активировались для возможности обучения
	L_ActLS = (float)( 0.02 * System::Math::Pow( (float)(2 * R_W + 1), 2 ) );

	// Поле вызванной активности коры
	Field_A_Evoced = gcnew array<float, 2>(X_C, Y_C);
	// Поле волновой активности коры
	Field_A_Wave = gcnew array<float, 2>(X_C, Y_C);
	// Поле плотности релаксирующих нейронов каждого из типов
	Field_A_Relax = gcnew array<float, 3>(X_C, Y_C, N_Types);

	// Продолжительность пакета идентификационной активности (int)
	T_ID = 10;
	// Продолжительность тишины (int)
	T_Passive = T_ID * 4;
	// Число тактов накопления активности при синаптическом обучении (int)
	T_SinapseLearn = T_Passive;
	// Набор полей последних состояний нейронов
	CortexA = gcnew array<unsigned short, 3>(X_C, Y_C, T_SinapseLearn);
	// Число тактов накопления активности при внесинаптическом обучении (int)
	T_ExtraSinapseLearn = 4;

	// Минимальная активность для начала обсчета
	LAmin = 0.008;
	// Предел активности для генерации спонтанных спайков
	LAmax = 0.025;

	// Порог активации по идентификатору
	L_act = 0.7;
	
	// количество волн, необходимых для консолидации (int)
	NCons = 5;

	// Егармин К.Н.: коллекция выбранных для моделирования паттернов вызванной активности
	CheckedPatterns = gcnew System::Collections::ObjectModel::Collection<int>();

	// Вероятность истинно спонтанного спайка
	Psp = 0.02;
	
	// Текущий слой (int)
	CurLayer = 0;

	// Суммарная ритмическая активность (int)
	NSer = 300;
	CurPosA = 0;
	AWave = gcnew array<double>(NSer);

	// Координаты угла исходящего туннеля (int)
	TX1 = X_C / 4;
	TY1 = Y_C / 4;
	// Координаты угла входящего туннеля (int)
	TX2 = X_C / 2;
	TY2 = Y_C / 2;
	// Размеры туннеля (int)
	TD = 30;

	// Параметры для формирования картины серии состояний
	FPic = false; // Егармин К.Н.: флаг того, надо или не надо строить набор картинок активности по времени
	// (int)
	NPic = 16; // Егармин К.Н.: количество картинок
	WPic = 4; // Егармин К.Н.: количество картинок по горизонтали
	Bigpic = gcnew System::Drawing::Bitmap(X_C * WPic, Y_C * 4);

	// Текущая последовательность слоев
	LayersSequence = gcnew array<int>(T_SinapseLearn);

	// Флаг включения обучения нейронов-детекторов
	FLearn = true;

	// Веса синапсов нейронов
	// Егармин К.Н.: видимо, каждый нейрон связан со всеми соседями (на расстоянии <= R_W) синапсами, а это их веса
	CortexW = gcnew array<float, 4>(X_C, Y_C, R_W * 2 + 1, R_W * 2 + 1);

	// Порог активации нейрона
	L_Spike = 0.6f;

	// Продолжительность вызванной активности
	T_EnvokedA = (int)(T_Passive * 1.5);

	// Картина состояния обучения
	pic1 = gcnew System::Drawing::Bitmap(X_C, Y_C);
	
	// Коэффициенты пространственной самоорганизации
	// Порог умирания от одиночества
	L_GameLive_Low = 0.15;
	// Порог умирания от перенасыщения
	L_GameLive_high = 0.25;

	// Картина вызванной активности
	picEvokedA = gcnew System::Drawing::Bitmap(X_C, Y_C);
	// Картина накопленной активности
	picActAccum = gcnew System::Drawing::Bitmap(X_C, Y_C);
	// Картина поля активности (размытая)
	picFieldA = gcnew System::Drawing::Bitmap(X_C, Y_C);
	// Картина релаксации
	picRelaxA = gcnew System::Drawing::Bitmap(X_C, Y_C);
	// Картина поля волны (размытая)
	picWaveA = gcnew System::Drawing::Bitmap(X_C, Y_C);
	
	// Картина поля активности, усредненного по времении (не используется)
	// picAAvg = gcnew System::Drawing::Bitmap(X_C, Y_C);

	//-----------------------------------------------------------------------------------------------
	// Егармин К.Н.: эти поля не используются:
	/*
	// Площадь поля усреднения активности
	SReceptF = (int)System::Math::Pow(RLAM * 2 + 1, 2);
	// Количество активных паттернов в режиме волны (int)
	NPC = 1;
	// Синапсы (int)
	N_Neurotransmitters = 2;
	// Время, отведенное на консолидацию (int)
	T_L1 = 50;
	*/
}