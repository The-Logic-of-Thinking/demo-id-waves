namespace Brain {
	ref class Core {
	public:
		// Конструктор коры
		Core();	





		//
		// Методы:
		//
		
		// Задание таблицы чувтвительности рецепторов
		void SetSens();
		
		// Создание случайных паттернов вызванной активности
		void PatCreate();	
		
		// Такт волны
		void Wave();

		// Рассчет полей состояния коры
		void CalcFields();

		// Обработка нейрона в состоянии покоя
		void S0(int %ix, int %iy);

		// Создание метаботропного рецептивного кластера
		void S1(int %ix, int %iy);

		// График суммарного ритма
		void DrawChart();

		// Проверяем на консолидацию или удаление идентификационных следов 
		void Draw_Status();
		
		// Формирование серии картинок
		void addpic();

		// Расчет вызванной активности
		void Calc_Evoked_Activity();
		
		// Обучение синаптических весов. Задание фасилитации
		void LearnW1();
		
		// Картина состояния обучения
		void Draw_Learn();

		// Проекция по волновому туннелю
		void TMove();

		// Картина вызванной активности
		void Draw_EvokedA();

		// Картина накопленной активности
		void Draw_ActAccum();

		// Картина поля активности (размытая)
		void Draw_FieldA();

		// Картина релаксации
		void Draw_RelaxA(int ntype);

		// Картина поля волны (размытая)
		void Draw_WaveA();

		// Рисование номеров входных аксонов
		void Draw_Numbers();
		
		// Активация входных паттернов
		void PatternsActivation();

		// Обновление состава активных входных аксонов
		void ActivePatternsRefresh();

		// Инициализация полей
		void InitCore();

		// Картина поля активности, усредненного по времении (этот метод не используется)
		// void MakePicAAvg();






		//
		// Поля:
		//
		
		// Кол-во типов нейронов
		int N_Types;
		// Таблица чувствительности синаптических и внесинаптических рецепторов к медиаторам, генерируемым аксонами нейронов разного типа
		array<unsigned short, 3> ^SensTable;
		
		// Размеры коры
		int X_C;
		int Y_C;

		// Основная картинка: кора
		System::Drawing::Bitmap ^pic;
		System::Drawing::Graphics ^Gpic;
		
		// Общее количество паттернов
		int NP;
		// Комментарии (Егармин К.Н.):
		// Речь идет о паттернах вызванной активности, которые обозначаются группами красных точек

		// Комментарии (Егармин К.Н.):
		// Структура, которая описывает один паттерн вызванной активности
		value class Pattern {
		public:
			// Центры паттернов
			int ix;
			int iy;

			array<unsigned short, 2> ^P;
		};
		// Набор паттернов вызванной активности // Егармин К.Н.: т.е. входных аксонов (на основе структуры выше)
		array<Pattern> ^PatSet;

		// Радиус паттерна вызванной активности
		int R_Pat;

		// Кол-во нейронов в патерне вызванной активности
		int NNPat;

		// Комментарии (Егармин К.Н.):
		// Структура, описывающая одну из картин идентификаторов для данного нейрона
		value class ID {
		public:
			// 0 - не консолидирован
			// 1 - консолидирован
			int ConsStatus;

			int NAct;
			int TCreat;

			int NP; // Номер паттерна для проверки во время отладки
			//
			// Егармин К.Н.: если я правильно понимаю, то это номер паттерна вызванной активности,
			//				 который породил данную идентификационную картину (волну)
			//

			array<unsigned short, 2> ^P;
		};
		// Комментарии (Егармин К.Н.):
		// Структура, описывающая состояние нейрона на коре
		value class Neuron {
		public:
			// Тип нейрона
			unsigned short Type;
			// 0 - входной аксон
			// 1 - нейрон первого уровня (волновой)
			// 2 - нейрон второго уровня

			// Текущий статус нейрона
			unsigned short Status;
			// 0 - спокоен // Комментарии (Егармин К.Н.): черный
			// 1 - вызванная активность // Комментарии (Егармин К.Н.): красный
			// 2 - волновая активность // Комментарии (Егармин К.Н.): белый
			// 3 - первый такт волновой активности
			// 4 - релаксация после волнового спайка // Комментарии (Егармин К.Н.): синий
			// 5 - спонтанная активность // Комментарии (Егармин К.Н.): зеленый
			// 6 - входной аксон
			// 7 - состояние проверки на возможное участие в волновом идентификаторе

			// Накопленная за время обучения синапсов активность
			float AAccumSinapse;

			// Накопленная за время обучения внесинаптических рецепторов активность
			float AAccumExtraSinapse;

			// Временное событие
			int T;

			// Вызванный потенциал активности нейрона в мощностном измерении
			float EvokedA;

			// Текущий статус обучения нейрона
			unsigned short StatusL;
			// 0 - свободен
			// 1 - фасилитация
			// 2 - обучен
			// 5 - не подлежит обучению (входной аксон)
			// Егармин К.Н.: а где 3 и 4? Наверное имеется в виду, что 5 относится к начальным паттернам вызванной активности,
			// которые играют роль отправных точек, поэтому их выделили в отстраненную от реальных нейронов необучаемую группу

			// Временное событие обучения
			int TL;

			// Набор картин идентификаторв индивидуальных для каждого нейрона
			System::Collections::ObjectModel::Collection<ID> ^ID;

			bool ERR;
		};
		// Кора
		array<Neuron, 2> ^Cortex;

		// Предел количества нейронов в релаксирующем состоянии для каждого из типов. Выше этого предела подавляется спонтанная активность
		array<double> ^LImin;
		
		// Расстояние слежения за активностью для ID (влево и вправо по горизонтали и вертикали)
		// Егармин К.Н.: для метаботропных рецепторов
		int R_ID;
		// Расстояние слежения за активностью для весов W (влево и вправо по горизонтали и вертикали)
		// Егармин К.Н.: для синаптических рецепторов
		int R_W;
		// Радиус распространения активности. Связан с расчетом активности на синапсах (трогать аккуратно)
		int RLAM;
		// шаблон распределения активности
		int NLocalAM;
		array<float, 2> ^LocalAM;
		// Параметр распространения активности. Дисперсия
		float Sigma2LAM;

		// Текущий такт
		int CT;

		// Период полурапада распределенной активности (тактов)
		int TAhalf;
		// Падение активности за один такт
		float KA;
		
		// Поле накопленной вызванной активности коры
		array<float, 2> ^Field_A_Accum;
		// Порог окружающей вызванной активности для возможности обучения
		float L_ActL1;
		
		// Поле мгновенной активности коры
		array<float, 2> ^Field_A;
		// Порог активности на синапсах для возможности обучения
		float L_ActLS;

		// Поле вызванной активности коры
		array<float, 2> ^Field_A_Evoced;
		// Поле волновой активности коры
		array<float, 2> ^Field_A_Wave;
		// Поле плотности релаксирующих нейронов каждого из типов
		array<float, 3> ^Field_A_Relax;

		// Продолжительность пакета идентификационной активности
		int T_ID;
		// Продолжительность тишины
		int T_Passive;
		// Число тактов накопления активности при синаптическом обучении
		int T_SinapseLearn;
		// Набор полей последних состояний нейронов
		array<unsigned short, 3> ^CortexA;
		// Число тактов накопления активности при внесинаптическом обучении
		int T_ExtraSinapseLearn;

		// Минимальная активность для начала обсчета
		double LAmin;
		// Предел активности для генерации спонтанных спайков
		double LAmax;

		// Порог активации по идентификатору
		double L_act;
		
		// количество волн, необходимых для консолидации
		int NCons;

		// Егармин К.Н.: коллекция выбранных для моделирования паттернов вызванной активности
		System::Collections::ObjectModel::Collection<int> ^CheckedPatterns;

		// Вероятность истинно спонтанного спайка
		double Psp;
		
		// Текущий слой
		int CurLayer;

		// Суммарная ритмическая активность
		int NSer;
		int CurPosA;
		array<double> ^AWave;

		// График суммарного ритма
		System::Drawing::Bitmap ^pic2;

		// Егармин К.Н.: предыдущая зона (для обратной проекции)
		Brain::Core ^cortex0;
		// Вторичная зона коры // Егармин К.Н.: следующая зона
		Brain::Core ^cortex2;
		
		// Координаты угла исходящего туннеля
		int TX1;
		int TY1;
		// Координаты угла входящего туннеля
		int TX2;
		int TY2;
		// Размеры туннеля
		int TD;

		// Параметры для формирования картины серии состояний
		bool FPic; // Егармин К.Н.: флаг того, надо или не надо строить набор картинок активности по времени
		int PicStart; // Егармин К.Н.: такт (момент времени), начиная с которого надо начать собирать картинки в количестве NPic
		int NPic; // Егармин К.Н.: количество картинок
		int WPic; // Егармин К.Н.: количество картинок по горизонтали
		System::Drawing::Bitmap ^Bigpic;

		// Текущая последовательность слоев
		array<int> ^LayersSequence;

		// Флаг включения обучения нейронов-детекторов
		bool FLearn;

		// Веса синапсов нейронов
		// Егармин К.Н.: видимо, каждый нейрон связан со всеми соседями (на расстоянии <= R_W) синапсами, а это их веса
		array<float, 4> ^CortexW;

		// Порог активации нейрона
		float L_Spike;

		// Продолжительность вызванной активности
		int T_EnvokedA;

		// Картина состояния обучения
		System::Drawing::Bitmap ^pic1;
		
		// Коэффициенты пространственной самоорганизации
		// Порог умирания от одиночества
		double L_GameLive_Low;
		// Порог умирания от перенасыщения
		double L_GameLive_high;

		// Картина вызванной активности
		System::Drawing::Bitmap ^picEvokedA;
		// Картина накопленной активности
		System::Drawing::Bitmap ^picActAccum;
		// Картина поля активности (размытая)
		System::Drawing::Bitmap ^picFieldA;
		// Картина релаксации
		System::Drawing::Bitmap ^picRelaxA;
		// Картина поля волны (размытая)
		System::Drawing::Bitmap ^picWaveA;

		// Картина поля активности, усредненного по времении (не используется)
		// System::Drawing::Bitmap ^picAAvg;

		//-----------------------------------------------------------------------------------------------
		// Егармин К.Н.: эти поля не используются:
		/*
		// Площадь поля усреднения активности
		int SReceptF;
		// Количество активных паттернов в режиме волны
		int NPC;
		// Синапсы 
		int N_Neurotransmitters;
		// Время, отведенное на консолидацию
		int T_L1;
		*/

	private:
		// Генератор случайных вещественных чисел от 0 до 1
		System::Random ^rnd;
	};
}